// Code generated by go-bindata.
// sources:
// authorize.html
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _authorizeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x4d\x6f\xe3\x36\x10\x86\xef\xfa\x15\x5c\x5e\x0b\x99\x6e\xe3\x0d\x8c\x82\x12\xe0\xb6\xeb\xed\x2e\xd0\xd4\x6d\x5c\xc4\x3d\xd2\xe2\x58\x62\xc2\x0f\x95\x1c\x39\x56\x0c\x5d\xfa\xdf\xfa\xbf\x0a\x7d\xc5\x1f\xa7\x14\x48\x7d\xb0\xfd\x0e\x07\xef\x3b\xf3\x08\xa0\xf8\x87\x9f\x7e\xfd\x71\xfd\xe7\xea\x13\x29\xd0\xe8\x34\xe2\xed\x0f\xd1\xc2\xe6\x09\x05\x4b\xdb\x02\x08\x99\x46\x84\x10\xc2\xb5\xb2\x4f\xc4\x83\x4e\x68\xc0\x5a\x43\x28\x00\x90\x92\xc2\xc3\x2e\xa1\x05\x62\x19\xbe\x67\xcc\x88\x43\x26\xed\x64\xeb\x1c\x06\xf4\xa2\x6c\x45\xe6\x0c\x7b\x2d\xb0\xd9\x64\x3a\x99\xb2\x2c\x84\x53\x6d\x62\x94\x9d\x64\x21\xd0\x2e\xa7\xff\x28\x8b\x90\x7b\x85\x75\x42\x43\x21\x6e\xe6\xb3\xf8\xb3\xfd\x78\x33\x9f\x1d\xfe\xfa\xed\x5b\xe1\x1e\x36\x8b\x6f\xa6\x1f\xe7\xbf\x6f\x56\x87\x55\x7e\xbb\xab\x67\x5f\x1e\xf6\xeb\xbb\x62\xfa\xe9\xbb\xdb\x9b\x8d\x59\x66\x5f\xf5\xfd\xe2\x59\x7d\xce\x97\x8b\x07\x26\x17\xea\xfe\xf6\xeb\xc6\x50\x92\x79\x17\x82\xf3\x2a\x57\x36\xa1\xc2\x3a\x5b\x1b\x57\x05\x3a\xac\x67\x00\x05\xc9\x0a\xe1\x03\x60\x42\xff\x58\x2f\xe3\xf9\x78\x84\x0a\x35\xa4\xf7\x2a\xb7\x55\xc9\x59\xaf\x22\xce\x7a\x36\x7c\xeb\x64\x9d\x46\x7c\xe7\xbc\x21\x99\x16\x21\x24\xb4\xfd\x1f\x17\xce\xab\x17\x67\x51\x68\x4a\x44\x86\xca\xd9\x84\xb2\xcc\x83\x04\x8b\x4a\xe8\xc0\x44\x85\x5d\x0f\x50\x62\x00\x0b\x27\x13\x5a\xba\x80\x63\xea\x4e\x81\x96\x01\x30\x8d\x5e\xb9\xf0\x0f\x71\x4c\x96\x6d\xd0\x9d\x30\x40\xe2\x38\x3d\x1d\x69\xc8\xc1\xca\x74\x51\xa1\xf3\xf5\x8b\xc8\x1e\x05\x67\x43\xed\x64\x70\x3c\xaa\x1d\x99\xfc\x02\x21\x88\x1c\x56\x1e\x02\x58\x6c\x9a\x33\xee\x84\xf0\x72\xdc\x42\x83\x90\x34\x3d\x1e\xc7\xfe\xa6\xe1\xac\x4c\xcf\xbc\xc0\xca\xa6\x89\xae\xc6\x5b\xc3\x01\x89\xb2\x65\x85\x17\xe3\x49\xb5\xbf\xa0\x93\x7b\x57\x95\x34\xbd\x8c\xd6\x62\x0b\x7a\x6c\xcb\x9c\x8e\x8d\x8c\x67\x24\x73\x16\xbd\xd3\x71\x77\x4a\xc9\xce\xf9\x84\x22\x1c\xb0\x0b\xa1\xe9\x97\x16\x68\xbd\x53\x4f\x02\x9d\xe7\xac\xeb\xba\xf2\x3d\x0b\x1f\x5d\xaf\xa2\xbb\xb6\xce\x90\x28\x99\xd0\x2a\x80\xb7\xc2\x00\x25\xed\xf7\xb9\xc6\xba\x84\x3e\x9e\x92\x52\x8b\x0c\x0a\xa7\x25\xf8\x84\x5e\x8c\x41\x2f\x76\x1d\x16\x18\xa8\x18\x79\xbd\x36\x93\x6a\x7f\x86\xaa\x97\x97\x54\x57\x22\x84\x67\xe7\xe5\xff\x4f\xb6\x1c\x92\x06\xba\x3f\x8b\xf0\xcf\xdf\xee\x9d\xb0\x8e\xde\x23\xd6\x93\xee\xb1\x9e\xf4\x05\xda\x7e\x86\x77\x65\xda\xcf\xd4\xa7\x16\x4a\x4a\xb0\xe3\x4c\xe8\x9e\x5a\xb1\x17\xba\x82\x84\x1e\x8f\x93\x75\x5b\x68\x1a\xca\xae\x9f\xc9\x0f\x15\xa2\xb3\xe4\xbf\x3f\x8c\x37\x72\xdb\xf6\xfe\x2d\xb8\x50\x6d\x8d\xc2\x71\xc4\x51\x0d\x1e\x5b\xb4\x64\x8b\x36\x2e\xbd\x32\xc2\xd7\x74\xbc\x03\xaa\x47\xce\x7a\x8f\x37\xb3\xe1\xec\x74\xeb\x70\xd6\x6e\x90\x46\x11\x67\xc3\x15\xc7\xba\xb7\xc4\xbf\x01\x00\x00\xff\xff\xb4\xc2\xf7\x46\x35\x06\x00\x00")

func authorizeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_authorizeHtml,
		"authorize.html",
	)
}

func authorizeHtml() (*asset, error) {
	bytes, err := authorizeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "authorize.html", size: 1589, mode: os.FileMode(438), modTime: time.Unix(1530367134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"authorize.html": authorizeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"authorize.html": &bintree{authorizeHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

